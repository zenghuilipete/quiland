Asymptotic Time Complexity

	Insert	Delete	Search	Find maximum	Space usage
Unsorted array
	O(1)	O(1)	O(n)	O(n)	O(n)
Value-indexed array
	O(1)	O(1)	O(1)	O(n)	O(n)
Sorted array
	O(n)	O(n)	O(log n)	O(1)	O(n)

Unsorted linked list
	O(1)*	O(1)*	O(n)	O(n)	O(n)
Sorted linked list
	O(1)*	O(1)*	O(n)	O(1)	O(n)

Self-balancing binary tree
	O(log n)	O(log n)	O(log n)	O(log n)	O(n)

Heap
	O(log n)	O(log n)†	O(n)	O(1)	O(n)

Hash table
	O(1)	O(1)	O(1)	O(n)	O(n)

 † The deletion cost is O(log n) for the minimum or maximum, O(n) for an arbitrary element.
 * The cost to add or delete an element into a known location in the list (i.e. if you have an iterator to the location) is O(1). If you don't know the location, then you need to traverse the list to the location of deletion/insertion, which takes O(n) time.
This table is only an approximate summary; for each data structure there are special situations and variants that may lead to different costs. Also two or more data structures can be combined to obtain lower costs.

Asymptotic [æsimp'tɔtik]  渐近线的
amortized [ə'mɔːtaɪz]  摊还, 摊销, 分期偿还
