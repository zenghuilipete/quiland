IOC使用反射创建对象
Bean初始化
	XML: 
		资源定位 
		Bean定义(BeanDefinition)载入 
		向IOC容器注册Bean定义
	Annotation: 
		<context:component-scan base-package="creative.air.spring"> 
		载入和注册

对象依赖注入
	createBeanInstance
	populateBean
		BeanDefinitionValueResolver BeanWrapper

spring对AOP的支持
1、如果目标对象实现了接口，默认会采用JDK的动态代理机制实现AOP 
2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP 
3、如果目标对象没有实现接口，必须使用CGLIB生成代理，spring会自动在CGLIB和JDK动态代理之间切换
4.如何强制使用CGLIB生成代理？ 
* 添加CGLIB库，SPRING_HOME/lib/cglib/*.jar 
* 在spring的配置文件中加入： 
<aop:aspectj-autoproxy proxy-target-class="true"/> 

JDK代理和CGLIB代理的区别？ 
* JDK代理只能对实现了接口的类生成代理，而不能针对类 
* CGLIB是针对类实现代理的，主要对指定的类生成一个子类，并覆盖其中的方法， 
  因为是继承，所以不能使用final来修饰类或方法<aop:aspectj-autoproxy proxy-target-class="true"/> 
  
execution(modifier-pattern?
          ret-type-pattern
          declaring-type-pattern?
          name-pattern(param-pattern)
          throws-pattern?)
修饰符匹配（modifier-pattern?）
返回值匹配（ret-type-pattern）
类路径匹配（declaring-type-pattern?）
方法名匹配（name-pattern）
参数匹配（(param-pattern)）
异常类型匹配（throws-pattern?）
其中后面跟着“?”的是可选项



